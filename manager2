import socket
import random
import threading

class Manager:
    def __init__(self):
        self.servers = {}
    
    def register_server(self, server_address):
        self.servers[server_address] = 0  # Inicializa com 0 arquivos armazenados
    
    def choose_servers(self):
        # Ordena servidores pela carga (número de arquivos armazenados)
        sorted_servers = sorted(self.servers.items(), key=lambda item: item[1])
        
        main_server = sorted_servers[0][0]  # Menor carga
        replica_server = random.choice(sorted_servers[1:])[0]  # Outro servidor com baixa carga
        return main_server, replica_server
    
    def update_server_load(self, server_address):
        if server_address in self.servers:
            self.servers[server_address] += 1
    
    def handle_backup_request(self, client_socket):
        try:
            file_name = client_socket.recv(1024).decode()
            main_server, replica_server = self.choose_servers()
            
            # Notifica o servidor principal para receber o arquivo
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as main_server_socket:
                main_server_socket.connect(main_server)
                main_server_socket.send(f"STORE {file_name}".encode())
                # Recebe confirmação de armazenamento
                confirmation = main_server_socket.recv(1024).decode()
                if confirmation == "STORED":
                    self.update_server_load(main_server)
                    # Notifica o servidor principal para enviar a réplica
                    main_server_socket.send(f"REPLICATE {replica_server[0]}:{replica_server[1]}".encode())
        except Exception as e:
            print(f"Error handling backup request: {e}")

    def run(self):
        manager_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        manager_socket.bind(('localhost', 9000))
        manager_socket.listen(5)
        print("Manager running...")
        
        while True:
            client_socket, _ = manager_socket.accept()
            threading.Thread(target=self.handle_backup_request, args=(client_socket,)).start()

# Inicia o gerenciador
manager = Manager()
manager.register_server(('localhost', 8001))
manager.register_server(('localhost', 8002))
manager.run()
